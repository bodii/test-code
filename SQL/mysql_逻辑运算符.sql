逻辑运算符用来判断表达式的真假。逻辑运算符的返回结果只有1和0(null);




[ 与运算 ]
&& 或 and
所有操作数不为0且不为空值(null)时，结果返回1;存在任何一个操作数
为0时，结果返回0;存在一个操作数为null，结果返回null。
尽管操作数包括负数和小数，结果依然是1。因为与运算时，负数和大于0
的数都等价与1。

[例1] select -1&&2&&3, 0&&3, 0&&null,3&&null;
+----------+------+---------+---------+
| -1&&2&&3 | 0&&3 | 0&&null | 3&&null |
+----------+------+---------+---------+
|        1 |    0 |       0 |    NULL |
+----------+------+---------+---------+

[例2] select -1 and 2 and 3, 0 and 3, 0 and null, 3 and null;
+----------------+---------+------------+------------+
| -1 and 2 and 3 | 0 and 3 | 0 and null | 3 and null |
+----------------+---------+------------+------------+
|              1 |       0 |          0 |       NULL |
+----------------+---------+------------+------------+




[ 或运算 ]
|| 或 or
所有操作数中存在任何一个操作数不为非0的数字时，结果返回1;如果操作数
中不包含非0的数字，包含null时，结果返回1；包含0和null时返回null;
如果操作数中只有0时，结果返回0。

[例1] select 1||-1||null||0, 3||null, 0||null, null||null,0||0;
+----------------+---------+---------+------------+------+
| 1||-1||null||0 | 3||null | 0||null | null||null | 0||0 |
+----------------+---------+---------+------------+------+
|              1 |       1 |    NULL |       NULL |    0 |
+----------------+---------+---------+------------+------+

[例2] select 1 or -1 or null or 0, 3 or null, 0 or null, null or null, 0 or 0;
+----------------------+-----------+-----------+--------------+--------+
| 1 or -1 or null or 0 | 3 or null | 0 or null | null or null | 0 or 0 |
+----------------------+-----------+-----------+--------------+--------+
|                    1 |         1 |      NULL |         NULL |      0 |
+----------------------+-----------+-----------+--------------+--------+




[ 非运算 ]
！ 或 not
通过非运算，将返回与操作数相反的结果。如果操作数是非0的数字，结果返回0;
如果操作数是0,结果返回1；如果操作数是null，结果返回null。

[例1] select !1,!0.3,!-3,!0,!null;
+----+------+-----+----+-------+
| !1 | !0.3 | !-3 | !0 | !null |
+----+------+-----+----+-------+
|  0 |    0 |   0 |  1 |  NULL |
+----+------+-----+----+-------+

[例2] select not 1, not 0.3, not -3, not 0, not null;
+-------+---------+--------+-------+----------+
| not 1 | not 0.3 | not -3 | not 0 | not null |
+-------+---------+--------+-------+----------+
|     0 |       0 |      0 |     1 |     NULL |
+-------+---------+--------+-------+----------+




[ 异或运算 ]
xor 表示异或运算。异或运算符 XOR 的基本形式为‘x1 xor x2’。
只要其中任何一个操作数为null时，结果返回null；如果x1和x2都
是非0的数字或者都是0时，结果返回0;如果x1和x2中一个是非0,另
一个是0时，结果返回1。
两个条件相同（同真或同假）即为假（0），两个条件不同即为真（1），
null与任何条件做异或或运算时都为null，如果从数学的角度理解就是，
空集与任何集合都为空。

[例1] select null xor 1, null xor 0, 3 xor 1, 1 xor 0,0 xor 0, 3 xor 2 xor 0 xor 1;
+------------+------------+---------+---------+---------+---------------------+
| null xor 1 | null xor 0 | 3 xor 1 | 1 xor 0 | 0 xor 0 | 3 xor 2 xor 0 xor 1 |
+------------+------------+---------+---------+---------+---------------------+
|       NULL |       NULL |       0 |       1 |       0 |                   1 |
+------------+------------+---------+---------+---------+---------------------+




[ 位运算符 ]
位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，
然后进行位运算，最后再将计算结果从二进制数变回十进制数。在mysq 中支持6
种位运算符。这6种位运算符分别是按位与，按位或，按位取反，按位异或，按位
左移和按位右移。

1.按位与 &
[例] select 5&6, 5&6&7;
+-----+-------+
| 5&6 | 5&6&7 |
+-----+-------+
|   4 |     4 |
+-----+-------+
5的二进制数为101,6的二进制数为110。两个二进制数的对应位上进行与运算，得到
100.然后将二进制数100转换为十进制数，结果即为4.在‘5&6&7’中，先将‘5&6’进行
计算，得到结果为4.然后再将4与7进行按位与。7的二进制数为111。按位与的结果为
110。转换为十进制就是4。

2.按位或 |
[例] select 5|6,5|6|7;
+-----+-------+
| 5|6 | 5|6|7 |
+-----+-------+
|   7 |     7 |
+-----+-------+

3.按位取反 ~
[例] select ~1;
+----------------------+
| ~1                   |
+----------------------+
| 18446744073709551614 |
+----------------------+
对数字1进行按位取反后，结果变成18446744073709551614。因为在mysql
中常量是8个字节，每个字节是8位，那么一个变量就是64位。数字1变成二
进制数以后，是由64位构成的，最后一位是1,前面的63位是0.进行按位取反
后，前63位的值是1,最后一位是0.这个二进制数最后转换为十进制数就是
18446744073709551614。使用bin()函数可以查看二进制数。
select bin(~1);
1111111111111111111111111111111111111111111111111111111111111110 

4.按位异或 ^
[例] select 5^6;
+-----+
| 5^6 |
+-----+
|   3 |
+-----+

5.按位左移与按位右移 << 或 >>
[例] select 5<<2, 5>>2;
+------+------+
| 5<<2 | 5>>2 |
+------+------+
|   20 |    1 |
+------+------+



