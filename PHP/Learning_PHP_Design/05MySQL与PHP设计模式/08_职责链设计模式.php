<?php 
	
/*
	【 职责链设计模式 】

	推卸责任
	职责链设计模式将请求诉发送者与接收都分开，这样可以避免请求者与接收者
	的耦合。另外，这个模式允许将请求沿着一个链传递到多个不同的对象，使这
	些对象都有机会处理请求。发送者并不需要知道哪一个对象处理这个请求，而
	对象也不需要知道是谁发送了这个请求。在这二者之间不存在耦合。

	职责链设计模式的好处
	职责链设计模式的好处是，任何对象都可以向处理请求的对象发送请求，而且
	处理请求的对象可以改变，从而可以结合更多或不同的对象来处理请求。所以
	请求者和请求处理器都可以改变，而不必担心对更大的系统带来破坏。

	看到职责链模式时，有些人可能会认为“这只不过是一个大的switch语句而已”。
	从某种程度上看似乎如此，不过实际上并不是这样。这确实会检查一个请求，确
	定它是否与某个case条件匹配。不过，switch语句是固定的，而职责链会由各个
	具体处理器定义其后继。基于这种组织，可以把任意多个响应存储在一个MySQL数
	据库表中，这样一来，多个不同的“咨询台”可以使用相同的表以及相同的PHP职责
	链。由于每个具体处理器都包含一个方法来指定它自已的后继，Client通过具体
	处理器对象指定后继时也就定义了顺序。

	另外，由于client要启动请求链，它可以在开发人员指定的任何位置开始。假设
	具体请求处理器4、10、15和30可以作为你希望的新咨询台，就可以指定处理器4
	作为链中的第一个处理器，然后指定处理器10作为它的后继，再指定15为10的后
	继，而30作为15的后继。所以，职责链具有switch语句所没有的灵活性。

*/

