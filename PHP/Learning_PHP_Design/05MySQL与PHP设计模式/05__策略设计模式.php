<?php 
	
/*
	策略设计模式的灵活性
*/

/*
	封装算法
	结合MySQL使用PHP时，要完成的任务之一是需要编写算法来处理对MySQL应用做出
	的不同类型的请求。一般的请求包括创建表，或者输入、选择、修改和删除数据。
	对于这些不同的请求，算法可能很简单，也可能很复杂，这取决于请求以及表的
	复杂性。

	设计模式的主要原则之一是封装变化的内容人。对于发送到PHP类的不同类型的请
	求，分别有不同的算法来处理这些MySQL请求，变化的显然是算法。这些变化可能
	很小，也可能是显著的变化，不过通过使用策略(Strategy)设计模式，我们可以
	大大简化这个过程。

	一般来讲，使用设计模式时，首先要考虑"什么会导致重新设计"？然后要避免这
	些导致重新设计的因素。不过，有没有一种方法既能做出改变又无需重新设计呢？
	通过封装那些变化的内容，程序员应首先确定 程序中哪些会变化，然后封装这些
	特性。这样一来，一个设计需要改变时，可以改变封装的元素，而不会影响系统的
	其余部分。由于不同的MySQL任务需要不同的算法，可以封装这些算法(任务)，策略
	设计模式非常适用。
 */

/*
	！ 请不要加条件语句 ！
	状态和策略设计模式有很多共同的特性，其中之一是Context参与者要避免使用条件
	语句。
	设计模式并不是要求永远不要使用条件或case语句，不过在一些模式中(如状态和策
	略设计模式)，使用条件语句可能会导致维护相当困难。如果要改变一个策略(封装
	的算法)，而且需要改变一大堆条件或case语句，那么引入错误的可能性会更大。另
	外需要说明，使用这两个模式时，客户参与者中引入条件或case语句是可以接受的，
	因为客户所要做的就是做出请求。另外，在封装算法中(具体策略)，完成某个任务
	可能需要一个条件或case语句。类似地，在使用mysqli实现数据输出和错误检查时，
	往往都会有条件语句。利用策略，不再需要条件语句来选择所需的行为。不同的任
	务由不同的具体策略来处理，因为客户通过上下文请求具体策略，它必须知道有哪
	些可用的策略。这并不是说客户选择过程中不能使用条件语句，而是说条件语句不
	是上下文的一部分。
 */

/*
	【 算法族 】
	GoF的《设计模式》中，有些元素的介绍不太详细，其中就包括"算法族"(family 
	of algorithms)的概念。开发人员需要定义一个算法族，但GoF并没有指定设计
	模式上下文中“族”(family)一词的确含义。不过，在《Head First Design 
	Patterns》一书中，Eric和Eliabeth Freeman提出了一个很简单但很有用的概念
	———— 行为集(a set of behaviors)。 任何依赖于一组特定行为的项目都可以转换
	为一种策略设计模式，将那些行为封装为策略。也就是说，需要某种算法才能实现
	这些行为。通过将它们封装为具体的策略，就能使用、重用和完成修改。

	这一章中的"族"由使用MySQL表通常所需的行为组成。一般需要输入、修改、获取
	和删除数据。这些涉及数据操作的行为就构成了一个“族”，每个族成员可以转换为
	一个策略。实现这些策略需要不同的算法，还要结合使用MySQL命令和PHP mysqli
	类。把这些操作放在不同的具体类中(所有具体类实现一个公共接口)，就成为了策
	略设计模式的一部分。
 */