<?php 

/* 
	【 策略设计模式 】
	是使用聚合实现的设计模式。聚合关系与相识关系类似，不过关系更强。
	聚合关系表示一个聚合对象与它的所有者有相同的生命期。它们都是可以
	独立运转的生理器官，但是如果一个停止工作，另一个也会停止，无法继
	续正常工作。
	*/

class Context
{
	private $strategy;

	public function __construct(IStrategy $strategy)
	{
		$this->strategy = $strategy;
	}

	public function algorithm($elements)
	{
		$this->strategy->algorithm($elements);
	}
}

interface IStrategy
{
	public function algorithm($elements);
}

/*
	在这个简单的IStrategy接口中，可以看到，它只包含一个方法algorithm().
	不过，看起来ConText类已经实现了algorithm()方法。实际上，通过构造函
	数，ConText类已经配置有IStrategy的一个具体实现。这个关系的重要特点
	是要指出两个对象如何构成一个聚合，另外它们要有相同的生命期。
 */

/*
	【  接口 】
	GoF('四人帮')将抽象类和接口都称为接口。他们所指是的是抽象类接口中
	未实现的方法和属性的集合。接口最重要的特性是能够在模式中提供松绑定。

 */

/*
	【 实现 】
	与接口的使用类似，你会发现“实现”（implements)一词也会用在不同的上下文
	中。从某种程度上讲，抽象类和接口都必须实现。抽象类中的所有抽象方法需
	要由某个子类实现，所以尽管子类只是继承一个抽象类的接口，但它至少还必须
	实现这个抽象类中的一些抽象方法。所以，对于一个实现某个抽象类或接口的具
	体类，涉及抽象类时，这个具体类的一个一般引用会同时意味着继承和实现。只
	是“实现”比“继承和实现”说起来要更容易一些。另外，这种说法也算给出了一个
	回旋空间，表示子类必须确定一个具体实现。

 */

/*
	【 操作 】
	在这本书中，包括类图中，你会经常遇到“操作”(operation)这个词。一般来讲，
	它指示完成某个工作的一段程序。操作可能与函数或方法是同义词，也可能指示
	类之间发生的多个不同事件。例如，操作可能表示一段代码，可以从设计模式中
	的一个具体类实例化一个实例。你可能还会遇到这样一种操作：包装ClassB来实
	例化ClassC的一个实例。在这种情况下，操作可能只是函数的一部分，或者只是
	构造函数中的一条语句。
 */