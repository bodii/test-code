#!/usr/bin/env python
# -*- coding:utf-8 -*-

"""
Topic: 第三章：数字日期和时间
Desc: 在 Python 中执行整数和浮点数的数学运算时很简单的。尽管如此，如果你需要执
行分数、数组或者是日期和时间的运算的话，就得做更多的工作了。本章集中讨论的
就是这些主题。

Title;         数字的四舍五入
Issue: 你想对浮点数执行指定精度的舍入运算
Answer:对于简单的舍入运算，使用内置的 round(value, ndigits) 函数即可。
"""

print(round(1.23, 1))
# 1.2
print(round(1.27, 1))
# 1.3
print(round(1.25361, 3))
# 1.254

'''
当一个值刚好在两个边界的中间的时候， round 函数返回离它最近的偶数。也就
是说，对 1.5 或者 2.5 的舍入运算都会得到 2。
'''

'''
传给 round() 函数的 ndigits 参数可以是负数，这种情况下，舍入运算会作用在
十位、百位、千位等上面。
'''
a = 1627731
print(round(a, -1))
# 1627730
print(round(a, -2))
# 1627700
print(round(a, -3))
# 1628000

'''
不要将舍入和格式化输出搞混淆了。如果你的目的只是简单的输出一定宽度的数，
你不需要使用 round() 函数。而仅仅只需要在格式化的时候指定精度即可。
'''
x = 1.23456
print(format(x, '0.2f'))
# 1.23
print(format(x, '0.3f'))
# 1.235
print('value is {:.3f}'.format(x))
# value is 1.235

'''
同样，不要试着去舍入浮点值来” 修正” 表面上看起来正确的问题。
'''
a = 2.1
b = 4.2
c = a + b
print(c)
# 6.300000000000001
c = round(c, 2)
print(c)
# 6.3