#!/usr/bin/env python
# -*- coding:utf-8 -*-

"""
Topic: 第一章：数据结构和算法
Desc: Python 提供了大量的内置数据结构，包括列表，集合以及字典。大多数情况下使
用这些数据结构是很简单的。但是，我们也会经常碰到到诸如查询，排序和过滤等等
这些普遍存在的问题。因此，这一章的目的就是讨论这些比较常见的问题和算法。另
外，我们也会给出在集合模块 collections 当中操作这些数据结构的方法。

Title:      查找两字典的相同点
Issue: 怎样在两个字典中寻寻找相同点 (比如相同的键、相同的值等等)？
answer: 为了寻找两个字典的相同点，可以简单的在两字典的 keys() 或者 items() 方法返
回结果上执行集合操作。
"""

a = {
    'x' : 1,
    'y' : 2,
    'z' : 3
}

b = {
    'w' : 10,
    'x' : 11,
    'y' : 2
}

print(a.keys() & b.keys()) # {'y', 'x'}
print(a.keys() - b.keys()) # {'z'}
print(a.items() & b.items()) # {('y', 2)}

'''
这些操作也可以用于修改或者过滤字典元素。比如，假如你想以现有字典构造一个
排除几个指定键的新字典。下面利用字典推导来实现这样的需求
'''
c = {key:a[key] for key in a.keys() - {'z','w'}}
{key:a[key] for key in a.keys() - {'z','w'}}
print(c) # {'x': 1, 'y': 2}

'''
字典的 items() 方法返回一个包含 (键，值) 对的元素视图对象。这个对象同样也
支持集合操作，并且可以被用来查找两个字典有哪些相同的键值对。
'''
'''
尽管字典的 values() 方法也是类似，但是它并不支持这里介绍的集合操作。某
种程度上是因为值视图不能保证所有的值互不相同，这样会导致某些集合操作会出现
问题。不过，如果你硬要在值上面执行这些集合操作的话，你可以先将值集合转换成
set，然后再执行集合运算就行了。
'''