Python比大多数编程语言（如Java、C++或C#）宽松，原因在于Python打破了其他语言
的规则。例如，Python默认能够访问类中的数据。这违反了一些面向对象编程的概念，
但是好处在于：Python首要的目标是实用。

面向对象编程 Object-Oriented Programming OOP， 三个概念：
1. 封装
2. 继承
3. 多态

封装的思想是，一个类能够隐藏执行某个任务所需的内部细节和数据。类保存需要的
数据，并且在正常情况下不支持查看数据。而且，类提供了一些对数据进行操作的方
法。这些方法能够隐藏内部细节，例如网络协议和磁盘存取操作等。封装是一种简化
程序的技术。在创建程序的每一步，可以编写集中处理单个任务的代码。封装隐藏了
复杂性。

继承意味着一个类可以继承或访问父类中定义的数据和方法。这正符合对一个问题领
域进行分类的常识。例如，矩形和圆都是形状。这里，基类可以是Shapes。Rectangle
类可以从Shapes继承，Circle类也同样可以。继承使您可以将Rectangle类和Circle
类对象看做Shapes类的子类和成员，这意味着可以在基类中编写通用的代码，而在子
类中编写具体的代码（术语儿子、子类和类的成员是类似的，在这里可以交换作用）。
对于大多数情况，基类应试是一般的，而子类应该是特殊的，继承通常被称为特化。

多态的意思是子类可以重写方法来完成更特殊的行为。例如，矩形和圆都是形状。可
以定义一个用于所有形状的共同操作的集合，例如move和draw。然而，Circle和draw
方法显然和Rectangle和draw方法是不同的。多态使您可以将方法命名为draw,然后调
用这些方法，就好像Circle和Rectangle都是Shapes，当然至少在这个例子中它们都
是的。
