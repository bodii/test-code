#!/usr/bin/env python3
# -*- coding:utf-8 -*-

"""
shelve模块的优势之一是允许我们保存不同的元素。这为确定合适的元素粒度的设计增加了负担。过于细
的粒度会浪费时间将它们从碎片组装起来。过于粗的粒度会浪费我们的时间去获取和保存不相关的元素。
由于shelf需要键，因此必须为对象设计合适的键，也必须管理不同对象的键。这意味着使用额外的属性
保存键以及可能需要为shelf上的元素创建额外的键集合作为索引。
用来访问shelve数据库上的元素的键就像weakref，它是一个间接引用。这意味着需要额外处理基于引用
追踪和访问元素。

由于使用shelve时程序会变得相对复杂，因此我们的软件必须更合理地分层。通常，我们将软件架构分为
下面几个层次：
1. 表示层（Presentation layer）：顶层用户界面，可能是一个web引用或者是一个桌面GUI程序。
2. 应用层（Application layer）：让应用程序得以正常工作的内部服务或者控器。这层也可以被称为
处理模型，与逻辑数据模型不同。
3. 业务逻辑层或问题域模型层（Business layer or problem domain model layer):定义了业务
领域或者问题域的对象，这层有时候被称为逻辑数据模型。
4. 基础架构（Infrastructure）：它通常还包括一些其他层和一些其他的横切关注点），例如日志、安装
和网络访问
5. 数据访问层（Data access layer）：这层包含了用来访问数据对象的协议或者方法。
6. 持久化层（Persistence layer）：这是文件存储系统中的物理数据模型。shelve模块实现了持久化。
"""


