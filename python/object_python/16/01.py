#!/usr/bin/env python3
# -*- coding:utf-8 -*-

''' 模块和包的设计 '''

'''
模块是Python中实现和重用的单元。
所有的Python编程都是在模块层面提供的。
类是面向对象设计和编程的基础。
模块--类的集合--是在Python中更高层面上的可重用单元。

一个Python模块是一个文件。
'''
'''
有关Python模块的设计，有3种常见的设计方案：
1. 库模块：
    全局模块：一些模块的设计将被导入作用于全局范围，创建一个模块命名空间，包含了所有
    项的集合。
    项集合：一些模块被设计为包含了一些独立项的导入，而不是创建一个模块对象。

2. 主要脚本模块：它们意味着从命令执行。可能会产生副作用。由于副作用的存在，它们不能
   做导入。如果试图导入一个主要脚本模块，它将被执行--做实际的工作，可能会更新文件或
   在运行时做模块被设计要做的事情。

3. 条件脚本模块： 这些模块有两个用例：它们可以被导入并且也可以从命令行执行。这些模块
   将包含主要导入的开关，正如在Python标准为库中所介绍的__main__ --最高级别的脚本
   环境。
'''
'''
在定义模块和类时，会涉及以下几点：
1. 模块和类在Python中都有一个名称。模块通常使用以小写字母开头的名称，类通常使用以大
    写字母开头的名称。
2. 模块和类的定义都是包含了对象的命名空间。
3. 模块在全局命名空间sys.modules中是单例的对象。类定义在命名空间中是唯一的，要么在
    全局命名空间__main__中或是一些本地的命名空间。类不是单例，定义可以被替换。一旦
    导入，模块不能再次被导入，除非被删除。
4. 在命名空间中，类或模块的定义可以被作为语句序列执行。
5. 模块中函数的定义等价于类定义中的静态方法。
6. 模块中类的定义等价于另一个类中的类定义。

模块和类之间有两点明显的区别：
1. 不能创建模块的实例，它总是单例的，但可以创建类的多个实例。
2. 在模块的赋值语句中将创建在模块命名空间内的全局变量，它可心在整个模块中被使用。类定
    义中的赋值语句将在类命名空间中创建一个变量，它需要一个限定词来区分全局变量。
'''