#!/usr/bin/env python3
# -*- coding:utf-8 -*-

''' 使用eval()完成更多的文字处理 '''

"""
配置文件中可能会包括一些类型的值，它们并没有简单的字符串表示，例如，集合可能会作为
一个元组或list文本，一个映射可能会作为一个dict文本。我们有不同的选择来处理这些复
杂的值。
这些选择围绕着一个问题，就是转换逻辑需要多复杂的Python语法。对于一些类型（int、
float、bool、complex、decimal.Decmial和fractions.Fraction),可以安全地从
字符串转换为一个一个文本值。因为这些类型对象的__init__()在处理字符串时不需要太多
的Python语法。
然而，对于其他类型，字符串的转换就不是那么容易了，在处理上有以下几种选择。
1. 禁止使用这些类型，使用配置文件的语法和处理规则，将非常简单的值组成复杂的Python
对象。
2. 使用ast.literal_eval()函数，因为它可以处理Python中文本值的许多情况。这通常
是最理想的方案。
3. 使用eval()直接执行字符串并创建所需要的Python对象。这种方式可以比ast.literal
_eval()函数解析更多类型的对象。
"""
# 使用ast.literal_eval()代替eval的代码：
import ast

a = ast.literal_eval('(3, 2)')
print( a )
b = eval('(3, 2)')
print( b )


''' 使用PY文件存储配置 '''
"""
PY文件模式意味着使用Python代码作为配置文件以及实现应用程序的语言。我们将有一个配置
文件，它只是一个简单的模块，配置文件的语法就是Python。这样就不需要解析过程。
使用Python时需要在设计上注意几点。我们有两个全局的策略来使用Python作为配置文件：
1. 一个最上层的脚本：在这种情况下，配置文件只是最上层的主程序。
2. 一个exec()的导入：在这种情况下，配置文件需要为模块的全局变量提供参数值。
""""
