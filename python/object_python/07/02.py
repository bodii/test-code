#!/usr/bin/env python3
# -*- coding:utf-8 -*-

''' 创建类 '''

"""
创建类是一组嵌套的两级过程。外部对类方法的引用让类的创建变得更加复杂，因为这涉及多步
查找。对象的类中会定义方法解析顺序(Method Resolution Order, MRO)。这定义了一个
基类如何定义一具属性或者方法。MRO会顺着继承层次向上查找;这意味子类中的名称会覆盖基类
中的名称。用这种方式实现的搜索符合对继承的预期。
类创建的第1阶段是带有原始定义的class语句。这个阶段会首先执行元类型，然后执行赋值语句
和类中的def语句。正如之前说的，类中的每一个def语句都会被翻译成一个嵌套的两级函数创建。
装饰器可以作为创建类过程的一部分，应用于每个函数方法。
类创建的第2阶段是将一个全局的类装饰器应用于类定义。通常，一个decorator函数可以增加
功能，较为常见的是添加属性而不是添加方法。但是，我们也会看到有一些添加方法和函数的装饰
器。
很明显，不可以通过装饰器修改从基类继承的功能，因为它们在方法解析查找的过程中是延迟解析
的。这带来了一些重要的设计要素。通常，我们用类或者mixin类引入方法。但是，我们只用装饰
器或者mixin类定义引入属性。
下面是类中内置的一些属性，其他的许多属性是元类型的一部分，如下：
属性                 说明
__doc__             类的文档字符串（documentation string），如果没有定义就是None
__name__            类名
__module__          类所属的模块名
__dict__            包含类命名空间的字典
__bases__           包含了基类的元组（有可能为空或者是一个单例），基类以基类列表中的
                    顺序存储;它用来处理方法的解析顺序
__class__           当前类的基类，通常是type类型
类中另外的一些方法函数包括__subclassshook__、__reduce__和__reduce_ex__，都属于pickle
接口。
"""