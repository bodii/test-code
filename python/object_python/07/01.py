#!/usr/bin/env python3
# -*- coding:utf-8 -*-

''' 装饰器和mixin---横切方面 '''
"""
一个软件的设计通常会包括一些跨越了不同的类、函数和方法的方面。有关技术方面的例子，包
括日志、设计和安全，这些方面必须有一致地实现。在面向对象编程中，重用功能的通用方法是
继承一个类。但是，继承并不总是最合适的方案。在软件设计中，有一些方面和类层次结构是正
交的。这些通常被称为“横切关注点”（cross-cutting concerns）。它们会跨越多个类，让
设计变得更加复杂。
装饰器提供了一种不用和继承结构绑定的定义功能的方法。我们可以用装饰器设计应用程序中的
某个方面，然后将装饰器应用于类、方法或者函数。
另外，我们可以谨慎地使用多重继承创建横切方面。会考虑用一个基类加上mixin类的方式来
引入新功能。通常，我们会使用mixin类创建横切方面。

一个对象的附加接口或者行为，被称为mixin类
"""
"""
一个def语句提供了一个名称、变量、默认值、一个docstring、一个代码块和一些其他的细节。
将一个装饰器应用在原始定义上。当我们将装饰器(@d)应用到一个函数（F)上时，结果就好像是
创建了一个新的函数，f'=@d(F)。函数名相同，但是依据增加、删除或者修改的属性不同，功能
会有所不同。

@decorate
def function():
    pass

# 执行过程：
def function():
    pass
function = decorate(function)

装饰器修改函数定义，然后创建了一个新的函数。

下面是函数的属性列表:
属性                   说明
__doc__               docstring或None
__name__              函数的初始名称
__module__            函数所属的模块名称，或者None
__qualname__          函数的命名：__module__.__name__
__defaults__          默认的参数值，如果没有默认参数就是None
__kwdefaults__        只有关键字(keyword-only)的参数的默认值
__code__              这个对象代表编译后的函数体
__dict__              函数属性的命名空间
__annotations__       参数的注释，包括‘return’为返回值的注释
__globals__           函数所属模块的全局命名空间：这个属性用于解析只读的全局变量
__closure__           与函数中的自由变量（free variables)的绑定或者为None。它是只读的

装饰器可以改变除__globals__和__closure__之外的其他所有属性。

在实践中，装饰通常包括定义一个封装了现有函数的新函数。可能需要复制或者修改前面的一些属性。
"""

