<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Vue custom directive learming</title>
    <script src="../../vue.min.js"></script>
</head>

<body>
    <!-- 钩子函数 -->
    <!-- 
        一个指令定义对象可以提供如下几个钩子函数（均为可选）：
        1. bind : 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一
        次性的初始化设置。

        2. inserted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定
        已被插入文档中）。

        3. update: 所有组件的VNode更新时调用，但是可能发生在其了Vnode更新之
        前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值
        来忽略不必要的模板更新

        4. componentUpdated: 指令所在组件的VNode及其子VNode全部更新后调用。

        5. unbind: 只调用一次，指令与元素解绑时调用。

     -->


     <!-- 钩子函数参数 -->
     <!-- 
         指令钩子函数会被传入以下参数：
         1. el: 指令所绑定的元素，可以用来直接操作DOM.
         2. binding: 一个对象，包含以下属性：
            2.1 name: 指令名，不包括v- 前缀。
            2.2 value: 指令的绑定值， 例如： v-my-directive='1+1'中，绑定值为2.
            2.3 oldValue: 指令绑定的前一个值，仅在update和componentUpdated钩子中
            可用。无论值是否改变都可用。
            2.4 expression: 字符串形式的指令表达式。例如：v-my-directive='1+1'中，
            表达式为"1+1".
            2.5 arg: 传给指令的参数，可选。例如： v-my-directive:foo中，参数为"foo".
            2.6 modifiers: 一个包含修饰符的对象。例如：v-my-directive.foo.bar中，修
            饰符对象为{ foo: true, bar:true }。
        3. vnode: Vue编译生成的虚拟节点。
        4. oldVnode: 上一个虚拟节点， 仅在update和componentUpdated钩子中可用。
      -->


    <div id="e1" v-demo:foo.a.b="message"></div>
    <script>
        Vue.directive('demo', {
            bind: function (el, binding, vnode) {
                var s = JSON.stringify;
                el.innerHTML = 
                    'name：'  + s(binding.name) + '<br>' +
                    'value: ' + s(binding.value) + '<br>' +
                    'expression: ' + s(binding.expression) + '<br>' +
                    'argument: '+ s(binding.arg) + '<br>' +
                    'modifiers: ' + s(binding.modifiers) + '<br>' +
                    'vnode keys: ' + Object.keys(vnode).join(', ');
            },
        });

        new Vue({
            el: '#e1',
            data: {
                message: 'hello!',
            },
        });
    </script>
</body>
</html>