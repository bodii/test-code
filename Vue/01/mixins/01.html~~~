<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Vue mixins learming</title>
    <script src="../../vue.min.js"></script>
</head>

<body>
    <script>
        // 定义一个混合对象
        var myMixin = {
            created: function () {
                this.hello();
            },
            methods: {
                hello: function () {
                    console.log('hello from mixin!');
                }
            }
        }

        // 定义一个使用混合对象的组件
        var Component = Vue.extend({
            mixins: [myMixin],
        });
        var component = new Component();
    </script>

    <!-- 选项合并 -->
    <!-- 
        当组件和混合对象含有同名选项时，这些选项将以恰当的方式混合。比如，
        同名钩子函数将混合为一个数组，因此都将被调用。另外，混合对象的钩子
        将在组件自身钩子之前调用。
     -->
    <script>
        var mixin = {
            created: function () {
                console.log('混合对象的钩子被调用');
            },
        };
        new Vue({
            mixins: [mixin],
            created: function () {
                console.log('组件钩子被调用');
            },
        });
    </script>

    <!-- 
        值为对象的选项，例如methods, components和directives，将被混合为同
        一个对象。两个对象键名冲突时，取组件对象的键值对。
        Vue.extend() 也使用同样的策略进行合并。
     -->
    <script>
        var mixin = {
            methods: {
                foo: function () {
                    console.log('foo');
                },
                conflicting: function () {
                    console.log('from mixin');
                },
            },
        };

        var vm = new Vue({
            mixins: [mixin],
            methods: {
                bar: function () {
                    console.log('bar');
                },
                conflicting: function () {
                    console.log('from self');
                },
            },
        });

    vm.foo();
    vm.bar();
    vm.conflicting();
    </script>


    <!-- 全局混合 -->
    <!-- 
        一旦使用全局混合对象，将会影响到所有之后创建的Vue实例。使用恰当时，可以
        为自定义对象注入处理逻辑。
        谨慎使用全局混合对象，因为会影响到每个单独创建的Vue实例（包括第三方模板）。
        大多数情况下，只应当用于自定义选项，就像上面示例一样。也可以将其用作Plugins以
        避免产生重复应用。
    -->
    <script>
        Vue.mixin({
            created: function () {
                var myOption = this.$options.myOption;
                if (myOption) {
                    console.log(myOption);
                }
            },
        });

        new Vue({
            myOption: 'hello!',
        });
    </script>

    <!-- 自定义选项合并策略 -->
    <!-- 
        自定义选项将使用默认策略，即简单地覆盖已有值。如果想让自定义选项以自定义逻辑合并，
        可以向Vue.config.optionMergeStrategies添加一个函数
     -->
     <script>
         /*
        Vue.config.optionMergeStratrategies.myOption = function (toVal, fromVal) {
            // return mergedVal
        }
        
        // 对于大多数对象选项，可以使用methods的合并策略
        var strategies = Vue.config.optionMergeStrategies;
        strategies.myOption = strategies.methods;

        // 混合策略的例子
        const merge = Vue.config.optionMergeStratrategies.computed;
        Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {
            if (!toVal) return fromVal;
            if (!fromVal) return toVal;
            return {
                getters: merge(toVal.getters, fromVal.getters),
                state: merge(toVal.state, fromVal.state),
                actions: merge(toVal.actions, fromVal.actions)
            };
        }
        */
    </script>
    
</body>
</html>