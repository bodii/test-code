<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Vue render function learning</title>
    <script src="../../vue.min.js"></script>
</head>

<body>
    <!-- createElement 参数 -->
    <script>
        // @returns {VNode}
        createElement(
            // { String | Object | function }
            // 一个HTML标签字符串，组件选项对象，或者一个返回值类型为String/Object的函数，必要参数
            'div',

            // {Object}
            // 一个包含模板相关属性的数据对象
            // 这样，你可以在template中使用这些属性。可选参数
            {

            },

            // { String | Array }
            // 子节点 （VNodes），由‘createElement()’构建而成，
            // 或使用字符串生成"文本节点"。可选参数
            [
                '先写一些文字',
                createElement('h1', '一则头条'),
                createElemnt(MyComponent, {
                    props: {
                        someProp: 'foobar',
                    },
                }),
            ]
        );


        /*
            深入data对象
            有一件事要注意：正如在模板语法中，v-bind: class和v-bind: style, 
            会被特别对待一样，在VNode数据对象中，下列属性名是级别最高的字段。该
            对象也允许你绑定普通的HTML特性，就像DOM属性一样，比如innerHTML（这会
            取代v-html指令）。
        */

        /*
           {
               // 和v-bind:class一样的Api
               class: {
                   foo: true,
                   bar: false,
               },
               // 和v-bind:style一样的API
               style: {
                   color: 'red',
                   fontSize: '14px',
               },
               // 正常的HTML特性
               attrs: {
                   id: 'foo',
               },
               // 组件props
               props: {
                   myProp: 'bar',
               },
               // DOM属性
               domProps: {
                   innerHTML: 'baz',
               },
               // 事件监听器基于'on'
               // 所以不再支持如v-on:keyup.enter修饰器
               // 需要手动匹配keyCode.
               on: {
                   click: this.clickHandler,
               },
               // 仅对于组件，用于监听原生事件，而不是组件内部使用'vm.$emit'触发事件
               nativeOn: {
                   click: this.nativeClickHandler,
               },
               // 自定义指令。注意，您无法对绑定中的'oldValue'赋值
               // Vue会为您持续追踪
               directives: [
                {
                    name: 'my-custom-directive',
                    value: '2',
                    expression: '1 + 1'，
                    arg: 'foo',
                    modifiers: {
                        bar: true,
                    },
                },
               ],
               // { name: props => createElement('span', props.text) }
               scopedSlots: {
                   default: props => createElement('span', props.text)
               },
               // 如果组件是其他组件的子组件，需为插槽指定名称
               slot: 'name-of-slot',
               // 其他特殊顶层属性
               key: 'myKey',
               ref: 'myRef'
           } 
        */
    </script>
</body>
</html>